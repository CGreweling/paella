package {import flash.display.*;import flash.media.*;import flash.net.*;import flash.errors.*;import flash.system.Security;import flash.events.*;import paella.IMediaElement;import paella.External;import paella.JavascriptTrace;import paella.JavascriptInterface;import paella.VideoElement;import flash.external.ExternalInterface;	public class FlashVideoPlayer extends Sprite {	var _javascriptInterface:JavascriptInterface;	var _autoplay:Boolean = false;	var _preload:Boolean = true;	var _timerRate:Number = 150;	var _startVolume:Number = 1.0;	var _streamer:String = "";		var _mediaElement:IMediaElement;	var _video:DisplayObject;		var _liveStream:Boolean;	var _bufferTime:Number;	var _url:String;	var _playerId:String;		public function FlashVideoPlayer() {		stage.scaleMode = StageScaleMode.NO_SCALE;		stage.align = StageAlign.TOP_LEFT;				External.call("base.log.setLevel(4)");				_javascriptInterface = new JavascriptInterface();				this.registerExternalInterface();				addEventListener(Event.ADDED_TO_STAGE, added, false, 0, true);				loadFlashVars();		if (checkParameters()) {						JavascriptTrace.log(this._url);									_mediaElement = new VideoElement(_javascriptInterface, _autoplay, _preload, _timerRate, _startVolume, _streamer);			_video = (_mediaElement as VideoElement).video;			_video.width = stage.stageWidth;			_video.height = stage.stageHeight;			stage.addEventListener(Event.RESIZE, onResize);			(_mediaElement as VideoElement).setReference(this);			addChild(_video);						_mediaElement.setSrc(this._url);			this._javascriptInterface.playerId = this._playerId;			_mediaElement.load();		}	}		private function added(evt:Event):void {		loaderAnimation.x = stage.stageWidth / 2;		loaderAnimation.y = stage.stageHeight / 2;	}		private function loadFlashVars():void {		this._liveStream = stage.loaderInfo.parameters.liveStream=="true" ? true:false;		this._bufferTime = stage.loaderInfo.parameters.bufferTime===undefined ? 0:Number(stage.loaderInfo.parameters.bufferTime);		this._playerId = stage.loaderInfo.parameters.playerId===undefined ? "":stage.loaderInfo.parameters.playerId;		this._url = stage.loaderInfo.parameters.url===undefined ? "":stage.loaderInfo.parameters.url;	}		private function checkParameters():Boolean {		var status:Boolean = true;		if (this._url=="") {			status = false;			JavascriptTrace.error("Video URL not specified");		}		if (this._playerId=="") {			JavascriptTrace.warning("No player identifier specified");		}		return status;	}		private function registerExternalInterface():void {		paella.External.addCallback("log",paella.JavascriptTrace.log);		paella.External.addCallback("error",paella.JavascriptTrace.error);		paella.External.addCallback("warning",paella.JavascriptTrace.warning);		paella.External.addCallback("debug",paella.JavascriptTrace.debug);				paella.External.addCallback("pause",this.pauseVideo);		paella.External.addCallback("play",this.playVideo);		paella.External.addCallback("seekToTime",this.seekToTime);		paella.External.addCallback("seekTo",this.seekTo);		paella.External.addCallback("isReady",this.isReady);		paella.External.addCallback("duration",this.getDuration);		paella.External.addCallback("getCurrentTime",this.getCurrentTime);		paella.External.addCallback("getWidth",this.getWidth);		paella.External.addCallback("getHeight",this.getHeight);		paella.External.addCallback("getVolume",this.getVolume);		paella.External.addCallback("setVolume",this.setVolume);				paella.External.addCallback("currentProgress",this.currentProgress);				paella.External.addCallback("setTrimming",this.setTrimming);		paella.External.addCallback("enableTrimming",this.enableTrimming);		paella.External.addCallback("disableTrimming",this.disableTrimming);			}		public function onResize(event:Event):void {		_video.width = stage.stageWidth;		_video.height = stage.stageHeight;		loaderAnimation.x = stage.stageWidth / 2;		loaderAnimation.y = stage.stageHeight / 2;	}	public function pauseVideo():void {		this._mediaElement.pause();	}		public function playVideo():void {		this._mediaElement.play();	}		public function seekToTime(pos:Number):void {		this._mediaElement.setCurrentTime(pos);	}		public function seekTo(percent:Number):void {		var time:Number = percent * this._mediaElement.duration() / 100;		seekToTime(time);	}		public function isReady():Boolean {		// TODO: Implement this		return true;	}		public function getDuration():Number {		return this._mediaElement.duration();	}		public function getCurrentTime():Number {		return this._mediaElement.currentTime();	}		public function getWidth():Number {		return this._mediaElement.videoWidth;	}		public function getHeight():Number {		return this._mediaElement.videoHeight;	}		public function getVolume():Number {		return this._mediaElement.getVolume();	}		public function setVolume(vol:Number):void {		this._mediaElement.setVolume(vol);	}		public function currentProgress():Number {		return this._mediaElement.currentProgress();	}		public function setTrimming(trim:Number):void {		JavascriptTrace.debug("setTrimming(" + trim + "): not implemented");	}		public function enableTrimming():void {		JavascriptTrace.debug("enableTrimming(): not implemented");	}		public function disableTrimming():void {		JavascriptTrace.debug("disableTrimming(): not implemented");	}}}